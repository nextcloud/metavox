/**
 * @copyright Copyright (c) 2023 John Molakvoæ <skjnldsv@protonmail.com>
 *
 * @author John Molakvoæ <skjnldsv@protonmail.com>
 *
 * @license AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
import { Node } from './files/node';
import { View } from './navigation/view';
export declare enum DefaultType {
    DEFAULT = "default",
    HIDDEN = "hidden"
}
interface FileActionData {
    /** Unique ID */
    id: string;
    /** Translatable string displayed in the menu */
    displayName: (files: Node[], view: View) => string;
    /** Svg as inline string. <svg><path fill="..." /></svg> */
    iconSvgInline: (files: Node[], view: View) => string;
    /** Condition wether this action is shown or not */
    enabled?: (files: Node[], view: View) => boolean;
    /**
     * Function executed on single file action
     * @return true if the action was executed successfully,
     * false otherwise and null if the action is silent/undefined.
     * @throws Error if the action failed
     */
    exec: (file: Node, view: View, dir: string) => Promise<boolean | null>;
    /**
     * Function executed on multiple files action
     * @return true if the action was executed successfully,
     * false otherwise and null if the action is silent/undefined.
     * @throws Error if the action failed
     */
    execBatch?: (files: Node[], view: View, dir: string) => Promise<(boolean | null)[]>;
    /** This action order in the list */
    order?: number;
    /**
     * Make this action the default.
     * If multiple actions are default, the first one
     * will be used. The other ones will be put as first
     * entries in the actions menu iff DefaultType.Hidden is not used.
     * A DefaultType.Hidden action will never be shown
     * in the actions menu even if another action takes
     * its place as default.
     */
    default?: DefaultType;
    /**
     * If true, the renderInline function will be called
     */
    inline?: (file: Node, view: View) => boolean;
    /**
     * If defined, the returned html element will be
     * appended before the actions menu.
     */
    renderInline?: (file: Node, view: View) => Promise<HTMLElement | null>;
}
export declare class FileAction {
    private _action;
    constructor(action: FileActionData);
    get id(): string;
    get displayName(): (files: Node[], view: View) => string;
    get iconSvgInline(): (files: Node[], view: View) => string;
    get enabled(): ((files: Node[], view: View) => boolean) | undefined;
    get exec(): (file: Node, view: View, dir: string) => Promise<boolean | null>;
    get execBatch(): ((files: Node[], view: View, dir: string) => Promise<(boolean | null)[]>) | undefined;
    get order(): number | undefined;
    get default(): DefaultType | undefined;
    get inline(): ((file: Node, view: View) => boolean) | undefined;
    get renderInline(): ((file: Node, view: View) => Promise<HTMLElement | null>) | undefined;
    private validateAction;
}
export declare const registerFileAction: (action: FileAction) => void;
export declare const getFileActions: () => FileAction[];
export {};
