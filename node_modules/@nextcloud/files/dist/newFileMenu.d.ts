/**
 * @copyright Copyright (c) 2021 John Molakvoæ <skjnldsv@protonmail.com>
 *
 * @author John Molakvoæ <skjnldsv@protonmail.com>
 *
 * @license AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
import { Folder } from './files/folder';
export interface Entry {
    /** Unique ID */
    id: string;
    /** Translatable string displayed in the menu */
    displayName: string;
    /** Default new file name */
    templateName?: string;
    /**
     * Condition wether this entry is shown or not
     * @param {Folder} context the creation context. Usually the current folder
     */
    if?: (context: Folder) => boolean;
    /**
     * Either iconSvgInline or iconClass must be defined
     * Svg as inline string. <svg><path fill="..." /></svg>
     */
    iconSvgInline?: string;
    /**
     * Existing icon css class
     * @deprecated use iconSvgInline instead
     */
    iconClass?: string;
    /**
     * Function to be run after creation
     * @param {Folder} context the creation context. Usually the current folder
     * @param {Node[]} content list of file/folders present in the context folder
     */
    handler: (context: Folder, content: Node[]) => void;
}
export declare class NewFileMenu {
    private _entries;
    registerEntry(entry: Entry): void;
    unregisterEntry(entry: Entry | string): void;
    /**
     * Get the list of registered entries
     *
     * @param {Folder} context the creation context. Usually the current folder
     */
    getEntries(context?: Folder): Array<Entry>;
    private getEntryIndex;
    private validateEntry;
}
export declare const getNewFileMenu: () => NewFileMenu;
