/**
 * @copyright Copyright (c) 2022 John Molakvoæ <skjnldsv@protonmail.com>
 *
 * @author John Molakvoæ <skjnldsv@protonmail.com>
 *
 * @license AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
import type { Folder, Node } from '@nextcloud/files';
import { Column } from './column.js';
export type ContentsWithRoot = {
    folder: Folder;
    contents: Node[];
};
interface ViewData {
    /** Unique view ID */
    id: string;
    /** Translated view name */
    name: string;
    /** Translated accessible description of the view */
    caption?: string;
    /** Translated title of the empty view */
    emptyTitle?: string;
    /** Translated description of the empty view */
    emptyCaption?: string;
    /**
     * Method return the content of the  provided path
     * This ideally should be a cancellable promise.
     * promise.cancel(reason) will be called when the directory
     * change and the promise is not resolved yet.
     * You _must_ also return the current directory
     * information alongside with its content.
     */
    getContents: (path: string) => Promise<ContentsWithRoot>;
    /** The view icon as an inline svg */
    icon: string;
    /** The view order */
    order: number;
    /**
     * Custom params to give to the router on click
     * If defined, will be treated as a dummy view and
     * will just redirect and not fetch any contents.
     */
    params?: Record<string, string>;
    /**
     * This view column(s). Name and actions are
     * by default always included
     */
    columns?: Column[];
    /** The empty view element to render your empty content into */
    emptyView?: (div: HTMLDivElement) => void;
    /** The parent unique ID */
    parent?: string;
    /** This view is sticky (sent at the bottom) */
    sticky?: boolean;
    /**
     * This view has children and is expanded (by default)
     * or not. This will be overridden by user config.
     */
    expanded?: boolean;
    /**
     * Will be used as default if the user
     * haven't customized their sorting column
     */
    defaultSortKey?: string;
}
export declare class View implements ViewData {
    private _view;
    constructor(view: ViewData);
    get id(): string;
    get name(): string;
    get caption(): string | undefined;
    get emptyTitle(): string | undefined;
    get emptyCaption(): string | undefined;
    get getContents(): (path: string) => Promise<ContentsWithRoot>;
    get icon(): string;
    set icon(icon: string);
    get order(): number;
    set order(order: number);
    get params(): Record<string, string> | undefined;
    set params(params: Record<string, string> | undefined);
    get columns(): Column[] | undefined;
    get emptyView(): ((div: HTMLDivElement) => void) | undefined;
    get parent(): string | undefined;
    get sticky(): boolean | undefined;
    get expanded(): boolean | undefined;
    set expanded(expanded: boolean | undefined);
    get defaultSortKey(): string | undefined;
}
export {};
