import { Permission } from '../permissions';
import { FileType } from './fileType';
import { Attribute, NodeData } from './nodeData';
export declare enum NodeStatus {
    /** This is a new node and it doesn't exists on the filesystem yet */
    NEW = "new",
    /** This node has failed and is unavailable  */
    FAILED = "failed",
    /** This node is currently loading or have an operation in progress */
    LOADING = "loading",
    /** This node is locked and cannot be modified */
    LOCKED = "locked"
}
export declare abstract class Node {
    private _data;
    private _attributes;
    private _knownDavService;
    constructor(data: NodeData, davService?: RegExp);
    /**
     * Get the source url to this object
     */
    get source(): string;
    /**
     * Get this object name
     */
    get basename(): string;
    /**
     * Get this object's extension
     */
    get extension(): string | null;
    /**
     * Get the directory path leading to this object
     * Will use the relative path to root if available
     */
    get dirname(): string;
    /**
     * Is it a file or a folder ?
     */
    abstract get type(): FileType;
    /**
     * Get the file mime
     */
    get mime(): string | undefined;
    /**
     * Get the file modification time
     */
    get mtime(): Date | undefined;
    /**
     * Get the file creation time
     */
    get crtime(): Date | undefined;
    /**
     * Get the file size
     */
    get size(): number | undefined;
    /**
     * Get the file attribute
     */
    get attributes(): Attribute;
    /**
     * Get the file permissions
     */
    get permissions(): Permission;
    /**
     * Get the file owner
     */
    get owner(): string | null;
    /**
     * Is this a dav-related ressource ?
     */
    get isDavRessource(): boolean;
    /**
     * Get the dav root of this object
     */
    get root(): string | null;
    /**
     * Get the absolute path of this object relative to the root
     */
    get path(): string;
    /**
     * Get the node id if defined.
     * Will look for the fileid in attributes if undefined.
     */
    get fileid(): number | undefined;
    /**
     * Get the node status.
     */
    get status(): NodeStatus | undefined;
    /**
     * Set the node status.
     */
    set status(status: NodeStatus | undefined);
    /**
     * Move the node to a new destination
     *
     * @param {string} destination the new source.
     * e.g. https://cloud.domain.com/remote.php/dav/files/emma/Photos/picture.jpg
     */
    move(destination: string): void;
    /**
     * Rename the node
     * This aliases the move method for easier usage
     *
     * @param basename The new name of the node
     */
    rename(basename: string): void;
    /**
     * Update the mtime if exists.
     */
    private updateMtime;
}
