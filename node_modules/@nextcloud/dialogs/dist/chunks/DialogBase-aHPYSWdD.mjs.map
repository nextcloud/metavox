{"version":3,"file":"DialogBase-aHPYSWdD.mjs","sources":["../../lib/components/DialogButton.vue","../../lib/components/DialogBase.vue"],"sourcesContent":["<template>\n\t<NcButton :aria-label=\"props.label\" :type=\"props.type\" @click=\"handleClick\">\n\t\t{{ props.label }}\n\t\t<template v-if=\"props.icon !== undefined\" #icon>\n\t\t\t<NcIconSvgWrapper v-if=\"typeof props.icon === 'string'\" :svg=\"props.icon\" />\n\t\t\t<component :is=\"props.icon\" v-else :size=\"20\" />\n\t\t</template>\n\t</NcButton>\n</template>\n\n<script setup lang=\"ts\">\nimport type { IDialogButton } from './types'\nimport { NcButton, NcIconSvgWrapper } from '@nextcloud/vue'\n\n// with vue 3.3:\n// const props = defineProps<IDialogButton>()\n\nconst props = defineProps<{\n\tcallback: IDialogButton['callback'],\n\tlabel: IDialogButton['label'],\n\ticon: IDialogButton['icon'],\n\ttype: IDialogButton['type'],\n}>()\n\nconst emit = defineEmits<(e: 'click', event: MouseEvent) => void>()\n\nconst handleClick = (e: MouseEvent) => {\n\tprops.callback?.()\n\temit('click', e)\n}\n\n</script>\n","<template>\n\t<NcModal v-if=\"open\"\n\t\tv-bind=\"modalProps\"\n\t\tclass=\"dialog__modal\"\n\t\t@close=\"handleClose\">\n\t\t<!-- The dialog name / header -->\n\t\t<h2 class=\"dialog__name\" v-text=\"name\" />\n\t\t<div class=\"dialog\" :class=\"dialogClasses\">\n\t\t\t<div ref=\"wrapper\" :class=\"['dialog__wrapper', { 'dialog__wrapper--collapsed': isNavigationCollapsed }]\">\n\t\t\t\t<!-- When the navigation is collapsed (too small dialog) it is displayed above the main content, otherwise on the inline start -->\n\t\t\t\t<nav v-if=\"hasNavigation\" class=\"dialog__navigation\" :class=\"navigationClasses\">\n\t\t\t\t\t<slot name=\"navigation\" :is-collapsed=\"isNavigationCollapsed\" />\n\t\t\t\t</nav>\n\t\t\t\t<!-- Main dialog content -->\n\t\t\t\t<div class=\"dialog__content\" :class=\"contentClasses\">\n\t\t\t\t\t<slot>\n\t\t\t\t\t\t<p>{{ props.message }}</p>\n\t\t\t\t\t</slot>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<!-- The dialog actions aka the buttons -->\n\t\t\t<div class=\"dialog__actions\">\n\t\t\t\t<slot name=\"actions\">\n\t\t\t\t\t<DialogButton v-for=\"(button, idx) in props.buttons\"\n\t\t\t\t\t\t:key=\"idx\"\n\t\t\t\t\t\tv-bind=\"button\"\n\t\t\t\t\t\t@click=\"handleClose\" />\n\t\t\t\t</slot>\n\t\t\t</div>\n\t\t</div>\n\t</NcModal>\n</template>\n\n<script setup lang=\"ts\">\nimport type { IDialogButton } from './types'\n\nimport { NcModal } from '@nextcloud/vue'\nimport { useElementSize } from '@vueuse/core'\nimport { computed, ref, useSlots } from 'vue'\n\nimport DialogButton from './DialogButton.vue'\n\nconst props = withDefaults(defineProps<{\n\t/** Name of the dialog (the heading) */\n\tname: string\n\t/** Text of the dialog */\n\tmessage?: string\n\t/** Additional elements to add to the focus trap */\n\tadditionalTrapElements?: string[]\n\t/**\n\t * The element where to mount the dialog, if `null` is passed the dialog is mounted in place\n\t * @default 'body'\n\t */\n\tcontainer?: string | null\n\t/**\n\t * Size of the underlying NcModal\n\t * @default 'small'\n\t */\n\tsize?: 'small' | 'normal' | 'large' | 'full'\n\t/**\n\t * Buttons to display\n\t * @default []\n\t */\n\tbuttons?: readonly IDialogButton[]\n\t/**\n\t * Optionally pass additionaly classes which will be set on the navigation for custom styling\n\t * @default []\n\t * @example\n\t * ```html\n\t * <DialogBase :navigation-classes=\"['mydialog-navigation']\"><!-- --></DialogBase>\n\t * <!-- ... -->\n\t * <style lang=\"scss\">\n\t * :deep(.mydialog-navigation) {\n\t *     flex-direction: row-reverse;\n\t * }\n\t * </style>\n\t * ```\n\t */\n\tnavigationClasses?: string|Record<string, boolean>|(string|Record<string, boolean>)[]\n\t/**\n\t * Optionally pass additionaly classes which will be set on the content wrapper for custom styling\n\t * @default []\n\t */\n\tcontentClasses?: string|Record<string, boolean>|(string|Record<string, boolean>)[]\n\t/**\n\t * Optionally pass additionaly classes which will be set on the dialog itself\n\t * (the default `class` attribute will be set on the modal wrapper)\n\t */\n\tdialogClasses?: string|Record<string, boolean>|(string|Record<string, boolean>)[]\n}>(), {\n\tadditionalTrapElements: () => [],\n\tbuttons: () => [],\n\tcontainer: undefined,\n\tmessage: '',\n\tcontentClasses: () => [],\n\tdialogClasses: () => [],\n\tnavigationClasses: () => [],\n\tsize: 'small',\n})\n\nconst emit = defineEmits<{\n\t(e: 'close'): void\n}>()\n\nconst slots = useSlots()\n\n/**\n * The dialog wrapper element\n */\nconst wrapper = ref<HTMLDivElement>()\n\n/**\n * We use the dialog width to decide if we collapse the navigation (flex direction row)\n */\nconst { width: dialogWidth } = useElementSize(wrapper)\n\n/**\n * Whether the navigation is collapsed due to dialog and window size\n * (collapses when modal is below: 900px modal width - 2x 12px margin)\n */\nconst isNavigationCollapsed = computed(() => dialogWidth.value < 876)\n\n/**\n * Whether a navigation was passed and the element should be displayed\n */\nconst hasNavigation = computed(() => slots?.navigation !== undefined)\n\n/**\n * Whether the dialog is currently open\n */\nconst open = ref(true)\n\n/**\n * Handle closing the dialog, will emit the `close` event\n */\nconst handleClose = () => {\n\topen.value = false\n\temit('close')\n}\n\n/**\n * Properties to pass to the underlying NcModal\n */\nconst modalProps = computed(() => ({\n\tadditionalTrapElements: props.additionalTrapElements,\n\tcontainer: props.container === undefined ? 'body' : props.container,\n\tname: props.name,\n\tsize: props.size,\n\tenableSlideshow: false,\n\tenableSwipe: false,\n}))\n</script>\n\n<style lang=\"scss\" scoped>\n.dialog {\n\theight: 100%;\n\twidth: 100%;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-between;\n\n\t&__modal {\n\t\t:deep(.modal-container) {\n\t\t\tdisplay: flex !important;\n\t\t\tflex-direction: column;\n\t\t}\n\t}\n\n\t&__wrapper {\n\t\tmargin-inline: 12px;\n\t\tmargin-block: 0 12px; // remove margin to align header with close button\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\t// Auto scale to fit\n\t\tflex: 1;\n\t\tmin-height: 0;\n\n\t\t&--collapsed {\n\t\t\tflex-direction: column;\n\t\t}\n\t}\n\n\t&__navigation {\n\t\tdisplay: flex;\n\t\tflex-shrink: 0;\n\t}\n\n\t// Navigation styling when side-by-side with content\n\t&__wrapper:not(&__wrapper--collapsed) &__navigation {\n\t\tflex-direction: column;\n\n\t\toverflow: hidden auto;\n\t\theight: 100%;\n\t\tmin-width: 200px;\n\t\tmargin-inline-end: 20px;\n\t}\n\n\t// Navigation styling when on top of content\n\t&__wrapper#{&}__wrapper--collapsed &__navigation {\n\t\tflex-direction: row;\n\t\tjustify-content: space-between;\n\n\t\toverflow: auto hidden;\n\t\twidth: 100%;\n\t\tmin-width: 100%;\n\t}\n\n\t&__name {\n\t\t// Same as the NcAppSettingsDialog\n\t\ttext-align: center;\n\t\theight: var(--default-clickable-area);\n\t\tmin-height: var(--default-clickable-area);\n\t\tline-height: var(--default-clickable-area);\n\t\tmargin-block: 4px 12px; // start = 4px to align with close button\n\t}\n\n\t&__content {\n\t\t// Auto fit\n\t\tflex: 1;\n\t\tmin-height: 0;\n\t}\n\n\t&__actions {\n\t\tdisplay: flex;\n\t\tgap: 6px;\n\t\talign-content: center;\n\t\twidth: fit-content;\n\t\tmargin-inline: auto 12px;\n\t\tmargin-block: 0 12px;\n\t}\n}\n</style>\n"],"names":["e","_a","props","emit","slots","useSlots","wrapper","ref","dialogWidth","useElementSize","isNavigationCollapsed","computed","hasNavigation","open","handleClose","modalProps"],"mappings":";;;;;;;;;;;;;;wDA0BoB,CAACA,MAAkB;;AACtC,OAAAC,IAAAC,EAAM,aAAN,QAAAD,EAAA,KAAAC,CAAA,GACAC,EAAK,SAASH,CAAC;AAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBC4EVI,IAAQC,KAKRC,IAAUC,KAKV,EAAE,OAAOC,EAAY,IAAIC,EAAeH,CAAO,GAM/CI,IAAwBC,EAAS,MAAMH,EAAY,QAAQ,GAAG,GAK9DI,IAAgBD,EAAS,OAAMP,KAAA,OAAA,SAAAA,EAAO,gBAAe,MAAS,GAK9DS,IAAON,EAAI,EAAI,GAKfO,IAAc,MAAM;AACzB,MAAAD,EAAK,QAAQ,IACbV,EAAK,OAAO;AAAA,IAAA,GAMPY,IAAaJ,EAAS,OAAO;AAAA,MAClC,wBAAwBT,EAAM;AAAA,MAC9B,WAAWA,EAAM,cAAc,SAAY,SAASA,EAAM;AAAA,MAC1D,MAAMA,EAAM;AAAA,MACZ,MAAMA,EAAM;AAAA,MACZ,iBAAiB;AAAA,MACjB,aAAa;AAAA,IACZ,EAAA;;;;;;;;;;;;;;;;;;;;;;;;"}