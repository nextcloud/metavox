import l from "toastify-js";
import { t as T } from "./index-CRno7JSe.mjs";
/**
 * @copyright Copyright (c) 2019 Julius Härtl <jus@bitgrid.net>
 *
 * @author Julius Härtl <jus@bitgrid.net>
 * @author John Molakvoæ <skjnldsv@protonmail.com>
 *
 * @license GNU AGPL version 3 or any later version
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
const d = "off", f = "polite", E = "assertive";
var i = /* @__PURE__ */ ((e) => (e[e.OFF = d] = "OFF", e[e.POLITE = f] = "POLITE", e[e.ASSERTIVE = E] = "ASSERTIVE", e))(i || {});
const O = 1e4, m = 7e3, h = -1;
function r(e, t) {
  var s;
  if (t = Object.assign({
    timeout: m,
    isHTML: !1,
    type: void 0,
    // An undefined selector defaults to the body element
    selector: void 0,
    onRemove: () => {
    },
    onClick: void 0,
    close: !0
  }, t), typeof e == "string" && !t.isHTML) {
    const u = document.createElement("div");
    u.innerHTML = e, e = u.innerText;
  }
  let n = (s = t.type) != null ? s : "";
  typeof t.onClick == "function" && (n += " toast-with-click ");
  const c = e instanceof Node;
  let o = i.POLITE;
  t.ariaLive ? o = t.ariaLive : (t.type === "toast-error" || t.type === "toast-undo") && (o = i.ASSERTIVE);
  const a = l({
    [c ? "node" : "text"]: e,
    duration: t.timeout,
    callback: t.onRemove,
    onClick: t.onClick,
    close: t.close,
    gravity: "top",
    selector: t.selector,
    position: "right",
    backgroundColor: "",
    className: "dialogs " + n,
    escapeMarkup: !t.isHTML,
    ariaLive: o
  });
  return a.showToast(), a;
}
function S(e, t) {
  return r(e, {
    ...t,
    type: "toast-error"
    /* ERROR */
  });
}
function y(e, t) {
  return r(e, {
    ...t,
    type: "toast-warning"
    /* WARNING */
  });
}
function A(e, t) {
  return r(e, {
    ...t,
    type: "toast-info"
    /* INFO */
  });
}
function L(e, t) {
  return r(e, {
    ...t,
    type: "toast-success"
    /* SUCCESS */
  });
}
function g(e, t, s) {
  if (!(t instanceof Function))
    throw new Error("Please provide a valid onUndo method");
  let n;
  s = Object.assign(s || {}, {
    // force 10 seconds of timeout
    timeout: O,
    // remove close button
    close: !1
  });
  const c = document.createElement("span"), o = document.createElement("button");
  return c.classList.add("toast-undo-container"), o.classList.add("toast-undo-button"), o.innerText = T("Undo"), c.innerText = e, c.appendChild(o), o.addEventListener("click", function(a) {
    a.stopPropagation(), t(a), (n == null ? void 0 : n.hideToast) instanceof Function && n.hideToast();
  }), n = r(c, {
    ...s,
    type: "toast-undo"
    /* UNDO */
  }), n;
}
export {
  O as T,
  m as a,
  h as b,
  d as c,
  f as d,
  E as e,
  L as f,
  y as g,
  A as h,
  S as i,
  g as j,
  r as s
};
