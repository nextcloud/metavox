"use strict";
const f = require("toastify-js"), O = require("./index-7mCqgGGG.cjs"), I = (e) => e && e.__esModule ? e : { default: e }, A = /* @__PURE__ */ I(f);
/**
 * @copyright Copyright (c) 2019 Julius Härtl <jus@bitgrid.net>
 *
 * @author Julius Härtl <jus@bitgrid.net>
 * @author John Molakvoæ <skjnldsv@protonmail.com>
 *
 * @license GNU AGPL version 3 or any later version
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
const u = "off", l = "polite", E = "assertive";
var i = /* @__PURE__ */ ((e) => (e[e.OFF = u] = "OFF", e[e.POLITE = l] = "POLITE", e[e.ASSERTIVE = E] = "ASSERTIVE", e))(i || {});
const d = 1e4, _ = 7e3, S = -1;
function r(e, t) {
  var s;
  if (t = Object.assign({
    timeout: _,
    isHTML: !1,
    type: void 0,
    // An undefined selector defaults to the body element
    selector: void 0,
    onRemove: () => {
    },
    onClick: void 0,
    close: !0
  }, t), typeof e == "string" && !t.isHTML) {
    const a = document.createElement("div");
    a.innerHTML = e, e = a.innerText;
  }
  let n = (s = t.type) != null ? s : "";
  typeof t.onClick == "function" && (n += " toast-with-click ");
  const c = e instanceof Node;
  let o = i.POLITE;
  t.ariaLive ? o = t.ariaLive : (t.type === "toast-error" || t.type === "toast-undo") && (o = i.ASSERTIVE);
  const T = A.default({
    [c ? "node" : "text"]: e,
    duration: t.timeout,
    callback: t.onRemove,
    onClick: t.onClick,
    close: t.close,
    gravity: "top",
    selector: t.selector,
    position: "right",
    backgroundColor: "",
    className: "dialogs " + n,
    escapeMarkup: !t.isHTML,
    ariaLive: o
  });
  return T.showToast(), T;
}
function h(e, t) {
  return r(e, {
    ...t,
    type: "toast-error"
    /* ERROR */
  });
}
function L(e, t) {
  return r(e, {
    ...t,
    type: "toast-warning"
    /* WARNING */
  });
}
function w(e, t) {
  return r(e, {
    ...t,
    type: "toast-info"
    /* INFO */
  });
}
function M(e, t) {
  return r(e, {
    ...t,
    type: "toast-success"
    /* SUCCESS */
  });
}
function R(e, t, s) {
  if (!(t instanceof Function))
    throw new Error("Please provide a valid onUndo method");
  let n;
  s = Object.assign(s || {}, {
    // force 10 seconds of timeout
    timeout: d,
    // remove close button
    close: !1
  });
  const c = document.createElement("span"), o = document.createElement("button");
  return c.classList.add("toast-undo-container"), o.classList.add("toast-undo-button"), o.innerText = O.t("Undo"), c.innerText = e, c.appendChild(o), o.addEventListener("click", function(T) {
    T.stopPropagation(), t(T), (n == null ? void 0 : n.hideToast) instanceof Function && n.hideToast();
  }), n = r(c, {
    ...s,
    type: "toast-undo"
    /* UNDO */
  }), n;
}
exports.TOAST_ARIA_LIVE_ASSERTIVE = E;
exports.TOAST_ARIA_LIVE_OFF = u;
exports.TOAST_ARIA_LIVE_POLITE = l;
exports.TOAST_DEFAULT_TIMEOUT = _;
exports.TOAST_PERMANENT_TIMEOUT = S;
exports.TOAST_UNDO_TIMEOUT = d;
exports.showError = h;
exports.showInfo = w;
exports.showMessage = r;
exports.showSuccess = M;
exports.showUndo = R;
exports.showWarning = L;
