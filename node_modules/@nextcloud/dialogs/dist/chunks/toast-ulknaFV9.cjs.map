{"version":3,"file":"toast-ulknaFV9.cjs","sources":["../../lib/toast.ts"],"sourcesContent":["/**\n * @copyright Copyright (c) 2019 Julius Härtl <jus@bitgrid.net>\n *\n * @author Julius Härtl <jus@bitgrid.net>\n * @author John Molakvoæ <skjnldsv@protonmail.com>\n *\n * @license GNU AGPL version 3 or any later version\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n///<reference types=\"toastify-js\" />\n\nimport Toastify from 'toastify-js'\nimport { t } from './utils/l10n.js'\n\nimport '../styles/toast.scss'\n\n/**\n * Enum of available Toast types\n */\nexport enum ToastType {\n\tERROR = 'toast-error',\n\tWARNING = 'toast-warning',\n\tINFO = 'toast-info',\n\tSUCCESS = 'toast-success',\n\tPERMANENT = 'toast-error',\n\tUNDO = 'toast-undo',\n}\n\n/** @deprecated Use ToastAriaLive.OFF */\nexport const TOAST_ARIA_LIVE_OFF = 'off'\n/** @deprecated Use ToastAriaLive.POLITE */\nexport const TOAST_ARIA_LIVE_POLITE = 'polite'\n/** @deprecated Use ToastAriaLive.ASSERTIVE */\nexport const TOAST_ARIA_LIVE_ASSERTIVE = 'assertive'\n\nexport enum ToastAriaLive {\n\tOFF = TOAST_ARIA_LIVE_OFF,\n\tPOLITE = TOAST_ARIA_LIVE_POLITE,\n\tASSERTIVE = TOAST_ARIA_LIVE_ASSERTIVE,\n}\n\n/** Timeout in ms of a undo toast */\nexport const TOAST_UNDO_TIMEOUT = 10000\n/** Default timeout in ms of toasts */\nexport const TOAST_DEFAULT_TIMEOUT = 7000\n/** Timeout value to show a toast permanently */\nexport const TOAST_PERMANENT_TIMEOUT = -1\n\n/**\n * Type of a toast\n * @see https://apvarun.github.io/toastify-js/\n * @notExported\n */\ntype Toast = ReturnType<typeof Toastify>\n\nexport interface ToastOptions {\n\t/**\n\t * Defines the timeout in milliseconds after which the toast is closed. Set to -1 to have a persistent toast.\n\t */\n\ttimeout?: number\n\n\t/**\n\t * Set to true to allow HTML content inside of the toast text\n\t * @default false\n\t */\n\tisHTML?: boolean\n\n\t/**\n\t * Set a type of {ToastType} to style the modal\n\t */\n\ttype?: ToastType\n\n\t/**\n\t * Provide a function that is called after the toast is removed\n\t */\n\tonRemove?: () => void\n\n\t/**\n\t * Provide a function that is called when the toast is clicked\n\t */\n\tonClick?: () => void\n\n\t/**\n\t * Make the toast closable\n\t */\n\tclose?: boolean\n\n\t/**\n\t * Specify the element to attach the toast element to (for testing)\n\t */\n\tselector?: string\n\n\t/**\n\t * Whether the messages should be announced to screen readers.\n\t * See the following docs for an explanation when to use which:\n\t * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n\t *\n\t * By default, errors are announced assertive and other messages \"polite\".\n\t */\n\tariaLive?: ToastAriaLive\n}\n\n/**\n * Show a toast message\n *\n * @param data Message to be shown in the toast, any HTML is removed by default\n * @param options\n */\nexport function showMessage(data: string|Node, options?: ToastOptions): Toast {\n\toptions = Object.assign({\n\t\ttimeout: TOAST_DEFAULT_TIMEOUT,\n\t\tisHTML: false,\n\t\ttype: undefined,\n\t\t// An undefined selector defaults to the body element\n\t\tselector: undefined,\n\t\tonRemove: () => { },\n\t\tonClick: undefined,\n\t\tclose: true\n\t}, options)\n\n\tif (typeof data === 'string' && !options.isHTML) {\n\t\t// fime mae sure that text is extracted\n\t\tconst element = document.createElement('div')\n\t\telement.innerHTML = data\n\t\tdata = element.innerText\n\t}\n\tlet classes = options.type ?? ''\n\n\tif (typeof options.onClick === 'function') {\n\t\tclasses += ' toast-with-click '\n\t}\n\n\tconst isNode = data instanceof Node\n\n\tlet ariaLive: ToastAriaLive = ToastAriaLive.POLITE\n\tif (options.ariaLive) {\n\t\tariaLive = options.ariaLive\n\t} else if (options.type === ToastType.ERROR || options.type === ToastType.UNDO) {\n\t\tariaLive = ToastAriaLive.ASSERTIVE\n\t}\n\n\tconst toast = Toastify({\n\t\t[!isNode ? 'text' : 'node']: data,\n\t\tduration: options.timeout,\n\t\tcallback: options.onRemove,\n\t\tonClick: options.onClick,\n\t\tclose: options.close,\n\t\tgravity: 'top',\n\t\tselector: options.selector,\n\t\tposition: 'right',\n\t\tbackgroundColor: '',\n\t\tclassName: 'dialogs ' + classes,\n\t\tescapeMarkup: !options.isHTML,\n\t\tariaLive,\n\t})\n\n\ttoast.showToast()\n\n\treturn toast\n}\n\n/**\n * Show a toast message with error styling\n *\n * @param text Message to be shown in the toast, any HTML is removed by default\n * @param options\n */\nexport function showError(text: string, options?: ToastOptions): Toast {\n\treturn showMessage(text, { ...options, type: ToastType.ERROR })\n}\n\n/**\n * Show a toast message with warning styling\n *\n * @param text Message to be shown in the toast, any HTML is removed by default\n * @param options\n */\nexport function showWarning(text: string, options?: ToastOptions): Toast {\n\treturn showMessage(text, { ...options, type: ToastType.WARNING })\n}\n\n/**\n * Show a toast message with info styling\n *\n * @param text Message to be shown in the toast, any HTML is removed by default\n * @param options\n */\nexport function showInfo(text: string, options?: ToastOptions): Toast {\n\treturn showMessage(text, { ...options, type: ToastType.INFO })\n}\n\n/**\n * Show a toast message with success styling\n *\n * @param text Message to be shown in the toast, any HTML is removed by default\n * @param options\n */\nexport function showSuccess(text: string, options?: ToastOptions): Toast {\n\treturn showMessage(text, { ...options, type: ToastType.SUCCESS })\n}\n\n/**\n * Show a toast message with undo styling\n *\n * @param text Message to be shown in the toast, any HTML is removed by default\n * @param onUndo Function that is called when the undo button is clicked\n * @param options\n */\nexport function showUndo(text: string, onUndo: (e: MouseEvent) => void, options?: ToastOptions): Toast {\n\t// onUndo callback is mandatory\n\tif (!(onUndo instanceof Function)) {\n\t\tthrow new Error('Please provide a valid onUndo method')\n\t}\n\n\tlet toast: Toast\n\n\toptions = Object.assign(options || {}, {\n\t\t// force 10 seconds of timeout\n\t\ttimeout: TOAST_UNDO_TIMEOUT,\n\t\t// remove close button\n\t\tclose: false\n\t})\n\n\t// Generate undo layout\n\tconst undoContent = document.createElement('span')\n\tconst undoButton = document.createElement('button')\n\tundoContent.classList.add('toast-undo-container')\n\tundoButton.classList.add('toast-undo-button')\n\tundoButton.innerText = t('Undo')\n\tundoContent.innerText = text\n\tundoContent.appendChild(undoButton)\n\n\tundoButton.addEventListener('click', function(event) {\n\t\tevent.stopPropagation()\n\t\tonUndo(event)\n\n\t\t// Hide toast\n\t\tif (toast?.hideToast instanceof Function) {\n\t\t\ttoast.hideToast()\n\t\t}\n\t})\n\n\ttoast = showMessage(undoContent, { ...options, type: ToastType.UNDO })\n\treturn toast\n}\n"],"names":["TOAST_ARIA_LIVE_OFF","TOAST_ARIA_LIVE_POLITE","TOAST_ARIA_LIVE_ASSERTIVE","ToastAriaLive","TOAST_UNDO_TIMEOUT","TOAST_DEFAULT_TIMEOUT","TOAST_PERMANENT_TIMEOUT","showMessage","data","options","_a","element","classes","isNode","ariaLive","toast","Toastify","showError","text","showWarning","showInfo","showSuccess","showUndo","onUndo","undoContent","undoButton","t","event"],"mappings":";;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CO,MAAMA,IAAsB,OAEtBC,IAAyB,UAEzBC,IAA4B;AAE7B,IAAAC,sBAAAA,OACXA,EAAAA,EAAA,MAAMH,CAAN,IAAA,OACAG,EAAAA,EAAA,SAASF,CAAT,IAAA,UACAE,EAAAA,EAAA,YAAYD,CAAZ,IAAA,aAHWC,IAAAA,KAAA,CAAA,CAAA;AAOL,MAAMC,IAAqB,KAErBC,IAAwB,KAExBC,IAA0B;AA8DvB,SAAAC,EAAYC,GAAmBC,GAA+B;AAzH9E,MAAAC;AAqIC,MAXAD,IAAU,OAAO,OAAO;AAAA,IACvB,SAASJ;AAAA,IACT,QAAQ;AAAA,IACR,MAAM;AAAA;AAAA,IAEN,UAAU;AAAA,IACV,UAAU,MAAM;AAAA,IAAE;AAAA,IAClB,SAAS;AAAA,IACT,OAAO;AAAA,KACLI,CAAO,GAEN,OAAOD,KAAS,YAAY,CAACC,EAAQ,QAAQ;AAE1C,UAAAE,IAAU,SAAS,cAAc,KAAK;AAC5C,IAAAA,EAAQ,YAAYH,GACpBA,IAAOG,EAAQ;AAAA,EAChB;AACI,MAAAC,KAAUF,IAAQD,EAAA,SAAR,OAAgBC,IAAA;AAE1B,EAAA,OAAOD,EAAQ,WAAY,eACnBG,KAAA;AAGZ,QAAMC,IAASL,aAAgB;AAE/B,MAAIM,IAA0BX,EAAc;AAC5C,EAAIM,EAAQ,WACXK,IAAWL,EAAQ,YACTA,EAAQ,SAAS,iBAAmBA,EAAQ,SAAS,kBAC/DK,IAAWX,EAAc;AAG1B,QAAMY,IAAQC,EAAAA,QAAS;AAAA,IACtB,CAAEH,IAAkB,SAAT,MAAe,GAAGL;AAAA,IAC7B,UAAUC,EAAQ;AAAA,IAClB,UAAUA,EAAQ;AAAA,IAClB,SAASA,EAAQ;AAAA,IACjB,OAAOA,EAAQ;AAAA,IACf,SAAS;AAAA,IACT,UAAUA,EAAQ;AAAA,IAClB,UAAU;AAAA,IACV,iBAAiB;AAAA,IACjB,WAAW,aAAaG;AAAA,IACxB,cAAc,CAACH,EAAQ;AAAA,IACvB,UAAAK;AAAA,EAAA,CACA;AAED,SAAAC,EAAM,UAAU,GAETA;AACR;AAQgB,SAAAE,EAAUC,GAAcT,GAA+B;AACtE,SAAOF,EAAYW,GAAM;AAAA,IAAE,GAAGT;AAAA,IAAS,MAAM;AAAA;AAAA,GAAiB;AAC/D;AAQgB,SAAAU,EAAYD,GAAcT,GAA+B;AACxE,SAAOF,EAAYW,GAAM;AAAA,IAAE,GAAGT;AAAA,IAAS,MAAM;AAAA;AAAA,GAAmB;AACjE;AAQgB,SAAAW,EAASF,GAAcT,GAA+B;AACrE,SAAOF,EAAYW,GAAM;AAAA,IAAE,GAAGT;AAAA,IAAS,MAAM;AAAA;AAAA,GAAgB;AAC9D;AAQgB,SAAAY,EAAYH,GAAcT,GAA+B;AACxE,SAAOF,EAAYW,GAAM;AAAA,IAAE,GAAGT;AAAA,IAAS,MAAM;AAAA;AAAA,GAAmB;AACjE;AASgB,SAAAa,EAASJ,GAAcK,GAAiCd,GAA+B;AAElG,MAAA,EAAEc,aAAkB;AACjB,UAAA,IAAI,MAAM,sCAAsC;AAGnD,MAAAR;AAEJ,EAAAN,IAAU,OAAO,OAAOA,KAAW,CAAA,GAAI;AAAA;AAAA,IAEtC,SAASL;AAAA;AAAA,IAET,OAAO;AAAA,EAAA,CACP;AAGK,QAAAoB,IAAc,SAAS,cAAc,MAAM,GAC3CC,IAAa,SAAS,cAAc,QAAQ;AACtC,SAAAD,EAAA,UAAU,IAAI,sBAAsB,GACrCC,EAAA,UAAU,IAAI,mBAAmB,GACjCA,EAAA,YAAYC,IAAE,MAAM,GAC/BF,EAAY,YAAYN,GACxBM,EAAY,YAAYC,CAAU,GAEvBA,EAAA,iBAAiB,SAAS,SAASE,GAAO;AACpD,IAAAA,EAAM,gBAAgB,GACtBJ,EAAOI,CAAK,IAGRZ,KAAA,OAAA,SAAAA,EAAO,sBAAqB,YAC/BA,EAAM,UAAU;AAAA,EACjB,CACA,GAEDA,IAAQR,EAAYiB,GAAa;AAAA,IAAE,GAAGf;AAAA,IAAS,MAAM;AAAA;AAAA,GAAgB,GAC9DM;AACR;;;;;;;;;;;;;"}