import { basename as k } from "path";
import { a as o, t as f, c as w } from "./chunks/index-CRno7JSe.mjs";
import "toastify-js";
import D from "vue";
import { D as F } from "./chunks/DialogBase-aHPYSWdD.mjs";
import T from "@mdi/svg/svg/folder-multiple.svg?raw";
import B from "@mdi/svg/svg/folder-move.svg?raw";
/**
 * @copyright Copyright (c) 2023 Ferdinand Thiessen <opensource@fthiessen.de>
 *
 * @author Ferdinand Thiessen <opensource@fthiessen.de>
 *
 * @license AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
const M = (v, i, a = () => {
}) => {
  const u = document.createElement("div");
  (document.querySelector(i == null ? void 0 : i.container) || document.body).appendChild(u);
  const r = new D({
    el: u,
    name: "VueDialogHelper",
    render: (h) => h(v, {
      props: i,
      on: {
        close: () => {
          a(), r.$destroy();
        }
      }
    })
  });
};
async function z(v, i, a = !1, u, C, r = o.Choose, h, m) {
  const y = (e, c) => {
    const n = (t) => {
      const s = (t == null ? void 0 : t.root) || "";
      let l = (t == null ? void 0 : t.path) || "";
      return l.startsWith(s) && (l = l.slice(s.length) || "/"), l;
    };
    return a ? (t) => e(t.map(n), c) : (t) => e(n(t[0]), c);
  }, P = (e) => {
    var c, n, t, s, l, p;
    return {
      id: e.fileid || null,
      path: e.path,
      mimetype: e.mime || null,
      mtime: ((c = e.mtime) == null ? void 0 : c.getTime()) || null,
      permissions: e.permissions,
      name: ((n = e.attributes) == null ? void 0 : n.displayname) || e.basename,
      etag: ((t = e.attributes) == null ? void 0 : t.etag) || null,
      hasPreview: ((s = e.attributes) == null ? void 0 : s.hasPreview) || null,
      mountType: ((l = e.attributes) == null ? void 0 : l.mountType) || null,
      quotaAvailableBytes: ((p = e.attributes) == null ? void 0 : p.quotaAvailableBytes) || null,
      icon: null,
      sharePermissions: null
    };
  };
  let b;
  r === o.Custom ? (b = [], (m.buttons || []).forEach((e) => {
    b.push({
      callback: y(i, e.type),
      label: e.text,
      type: e.defaultButton ? "primary" : "secondary"
    });
  })) : b = (e, c) => {
    var n, t, s;
    const l = [], p = ((t = (n = e == null ? void 0 : e[0]) == null ? void 0 : n.attributes) == null ? void 0 : t.displayName) || ((s = e == null ? void 0 : e[0]) == null ? void 0 : s.basename), d = p || k(c);
    return r === o.Choose && l.push({
      callback: y(i, o.Choose),
      label: p && !a ? f("Choose {file}", { file: p }) : f("Choose"),
      type: "primary"
    }), (r === o.CopyMove || r === o.Copy) && l.push({
      callback: y(i, o.Copy),
      label: d ? f("Copy to {target}", { target: d }) : f("Copy"),
      type: "primary",
      icon: T
    }), (r === o.Move || r === o.CopyMove) && l.push({
      callback: y(i, o.Move),
      label: d ? f("Move to {target}", { target: d }) : f("Move"),
      type: r === o.Move ? "primary" : "secondary",
      icon: B
    }), l;
  };
  const g = {};
  typeof (m == null ? void 0 : m.filter) == "function" && (g.filterFn = (e) => m.filter(P(e)));
  const _ = typeof u == "string" ? [u] : u || [];
  M(w, {
    ...g,
    name: v,
    buttons: b,
    multiselect: a,
    path: h,
    mimetypeFilter: _,
    allowPickDirectory: (m == null ? void 0 : m.allowDirectoryChooser) === !0 || _.includes("httpd/unix-directory")
  });
}
async function H(v, i, a, u) {
  M(F, { name: i, message: v, buttons: [
    {
      label: "No",
      // eslint-disable-next-line n/no-callback-literal
      callback: () => a(!1)
    },
    {
      label: "Yes",
      type: "primary",
      // eslint-disable-next-line n/no-callback-literal
      callback: () => a(!0)
    }
  ], size: "small" }, () => a(!1));
}
export {
  H as confirm,
  z as filepicker
};
