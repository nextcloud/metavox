/// <reference types="@nextcloud/typings" />

/**
 * displays confirmation dialog
 * @param text content of dialog
 * @param title dialog title
 * @param callback Callback which will be triggered when user presses OK (true or false would be passed to callback respectively)
 * @param modal Do not use
 * @return {Promise}
 */
declare function confirm_2(text: string, title: string, callback: (s: boolean) => void, modal?: never): Promise<void>;
export { confirm_2 as confirm }

/**
 * Legacy wrapper to support `OC.dialogs.filepicker` with the new Vue based filepicker
 *
 * Prefer to use the filepicker directly instead.
 *
 * In order to pick several types of mime types they need to be passed as an
 * array of strings.
 *
 * When no mime type filter is given only files can be selected. In order to
 * be able to select both files and folders "['*', 'httpd/unix-directory']"
 * should be used instead.
 *
 * @param {string} title dialog title
 * @param {function} callback which will be triggered when user presses Choose
 * @param {boolean} [multiselect] whether it should be possible to select multiple files
 * @param {string[]} [mimetype] mimetype to filter by - directories will always be included
 * @param {boolean} [_modal] do not use
 * @param {string} [type] Type of file picker : Choose, copy, move, copy and move
 * @param {string} [path] path to the folder that the the file can be picket from
 * @param {Object} [options] additonal options that need to be set
 * @param {Function} [options.filter] filter function for advanced filtering
 */
export declare function filepicker(title: string, callback: (s: string | string[], type: FilePickerType) => void, multiselect?: boolean, mimetype?: string | string[], _modal?: boolean, type?: FilePickerType, path?: string, options?: any): Promise<void>;

declare enum FilePickerType {
    Choose = 1,
    Move = 2,
    Copy = 3,
    CopyMove = 4,
    Custom = 5
}

export { }
