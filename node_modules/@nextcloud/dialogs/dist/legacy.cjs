"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const F = require("path"), l = require("./chunks/index-7mCqgGGG.cjs");
require("toastify-js");
const T = require("vue"), M = require("./chunks/DialogBase-XAlPDcV_.cjs"), q = require("@mdi/svg/svg/folder-multiple.svg?raw"), D = require("@mdi/svg/svg/folder-move.svg?raw"), _ = (o) => o && o.__esModule ? o : { default: o }, w = /* @__PURE__ */ _(T), B = /* @__PURE__ */ _(q), I = /* @__PURE__ */ _(D);
/**
 * @copyright Copyright (c) 2023 Ferdinand Thiessen <opensource@fthiessen.de>
 *
 * @author Ferdinand Thiessen <opensource@fthiessen.de>
 *
 * @license AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
const k = (o, a, r = () => {
}) => {
  const c = document.createElement("div");
  (document.querySelector(a == null ? void 0 : a.container) || document.body).appendChild(c);
  const n = new w.default({
    el: c,
    name: "VueDialogHelper",
    render: (h) => h(o, {
      props: a,
      on: {
        close: () => {
          r(), n.$destroy();
        }
      }
    })
  });
};
async function V(o, a, r = !1, c, b, n = l.FilePickerType.Choose, h, p) {
  const m = (e, y) => {
    const u = (t) => {
      const s = (t == null ? void 0 : t.root) || "";
      let i = (t == null ? void 0 : t.path) || "";
      return i.startsWith(s) && (i = i.slice(s.length) || "/"), i;
    };
    return r ? (t) => e(t.map(u), y) : (t) => e(u(t[0]), y);
  }, C = (e) => {
    var y, u, t, s, i, f;
    return {
      id: e.fileid || null,
      path: e.path,
      mimetype: e.mime || null,
      mtime: ((y = e.mtime) == null ? void 0 : y.getTime()) || null,
      permissions: e.permissions,
      name: ((u = e.attributes) == null ? void 0 : u.displayname) || e.basename,
      etag: ((t = e.attributes) == null ? void 0 : t.etag) || null,
      hasPreview: ((s = e.attributes) == null ? void 0 : s.hasPreview) || null,
      mountType: ((i = e.attributes) == null ? void 0 : i.mountType) || null,
      quotaAvailableBytes: ((f = e.attributes) == null ? void 0 : f.quotaAvailableBytes) || null,
      icon: null,
      sharePermissions: null
    };
  };
  let d;
  n === l.FilePickerType.Custom ? (d = [], (p.buttons || []).forEach((e) => {
    d.push({
      callback: m(a, e.type),
      label: e.text,
      type: e.defaultButton ? "primary" : "secondary"
    });
  })) : d = (e, y) => {
    var u, t, s;
    const i = [], f = ((t = (u = e == null ? void 0 : e[0]) == null ? void 0 : u.attributes) == null ? void 0 : t.displayName) || ((s = e == null ? void 0 : e[0]) == null ? void 0 : s.basename), v = f || F.basename(y);
    return n === l.FilePickerType.Choose && i.push({
      callback: m(a, l.FilePickerType.Choose),
      label: f && !r ? l.t("Choose {file}", { file: f }) : l.t("Choose"),
      type: "primary"
    }), (n === l.FilePickerType.CopyMove || n === l.FilePickerType.Copy) && i.push({
      callback: m(a, l.FilePickerType.Copy),
      label: v ? l.t("Copy to {target}", { target: v }) : l.t("Copy"),
      type: "primary",
      icon: B.default
    }), (n === l.FilePickerType.Move || n === l.FilePickerType.CopyMove) && i.push({
      callback: m(a, l.FilePickerType.Move),
      label: v ? l.t("Move to {target}", { target: v }) : l.t("Move"),
      type: n === l.FilePickerType.Move ? "primary" : "secondary",
      icon: I.default
    }), i;
  };
  const g = {};
  typeof (p == null ? void 0 : p.filter) == "function" && (g.filterFn = (e) => p.filter(C(e)));
  const P = typeof c == "string" ? [c] : c || [];
  k(l.FilePickerVue, {
    ...g,
    name: o,
    buttons: d,
    multiselect: r,
    path: h,
    mimetypeFilter: P,
    allowPickDirectory: (p == null ? void 0 : p.allowDirectoryChooser) === !0 || P.includes("httpd/unix-directory")
  });
}
async function x(o, a, r, c) {
  const b = [
    {
      label: "No",
      // eslint-disable-next-line n/no-callback-literal
      callback: () => r(!1)
    },
    {
      label: "Yes",
      type: "primary",
      // eslint-disable-next-line n/no-callback-literal
      callback: () => r(!0)
    }
  ];
  k(M.DialogBase, { name: a, message: o, buttons: b, size: "small" }, () => r(!1));
}
exports.confirm = x;
exports.filepicker = V;
