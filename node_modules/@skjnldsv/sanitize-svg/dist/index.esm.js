import { Buffer } from 'buffer';
import isSvg from 'is-svg';

const readAsText = (svg) => new Promise((resolve) => {
    if (!isFile(svg)) {
        resolve(svg.toString('utf-8'));
    }
    else {
        const fileReader = new FileReader();
        fileReader.onload = () => {
            resolve(fileReader.result);
        };
        fileReader.readAsText(svg);
    }
});
const isFile = (obj) => {
    return obj.size !== undefined;
};
const sanitizeSVG = async (svg) => {
    if (!svg) {
        throw new Error('Not an svg');
    }
    let svgText = '';
    if (Buffer.isBuffer(svg) || svg instanceof File) {
        svgText = await readAsText(svg);
    }
    else {
        svgText = svg;
    }
    if (!isSvg(svgText)) {
        throw new Error('Not an svg');
    }
    const div = document.createElement('div');
    div.innerHTML = svgText;
    const svgEl = div.firstElementChild;
    const attributes = Array.from(svgEl.attributes).map(({ name }) => name);
    const hasScriptAttr = !!attributes.find((attr) => attr.startsWith('on'));
    const scripts = svgEl.getElementsByTagName('script');
    return scripts.length === 0 && !hasScriptAttr ? svg : null;
};

export { sanitizeSVG };
//# sourceMappingURL=index.esm.js.map
